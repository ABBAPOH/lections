Для начала углубимся в историю. Давным давно, в одной далекой далекой галактике...
Когда компьютеры были большими и теплыми, а языков программирования ещё не существовало,
люди писали программы в так называемых машинных кодах. По сути, они руками прописывали номера
команд и адреса операндов этих команд в программе. Была специальная профессия - программистка -
это девочки, которые переносили программу с "человекочитаемого" вида в виде мнемокодов на
перфокарты. Писать программы было сложно, ведь на бумажке даже поменять строчки местами или
вставить кусок кода в середину программы было сложно - приходилось переписывать с нуля (иначе был
риск что девочка-программист не поймёт каракулей разработчика). Впрочем, старые компьютеры были
большими печатными машинками, то есть достаточно быстро повились простейшие текстовые редакторы.
А раз текст можно набирать на компе, то и этап трансляции из мнемокодов можно возложить на машину.
Как-то так появился язык ассемблера (это лично моя теория, навскидку найти историю вомникновения
не удалось). Произошло это где-то в 50х годах.

Язык ассемблера очень сильно отличается от привычных
языков программирвания. Например, в нем нет переменных или конструкции ветвления. По сути,
ассемблер - это набор инструкций, которые выполняются строго последовательно. Да, можно при помощи
goto переходить в любые места кода, так организуются ветвления, циклы. Хотя, справедливости ради,
есть инструкция loop, которая на деле тот же goto. Зато всяких goto есть миллион - есть безусловный
переход (jmp), есть пачка условных, например jnz, je и прочее. Условные переходы смотрят на
результат выполнения предыдущей операции - например, получился ли 0 или отрицтельное/положительное
число. Делается это при помощи флагов - арифметические операции побочным эффектом имеют установку
битиков, имеющих специальный смысл - например бит переполнения, бит знака, бит четности и тп. Также
из отличий ассемблера можно назвать работу с прерываниями (можно инициировать прерывание).
Прерывание - сигнал, сообщающий процессору о наступлении какого-либо события. При этом выполнение
текущей последовательности команд приостанавливается и управление передаётся обработчику
прерывания, который реагирует на событие и обслуживает его, после чего возвращает управление в
прерванный код. Например, знаменитое 21е прерывание, которое используется для печати символов
на экран.

В общем, писать на ассемблере людям быстро надоело и они стали придумывать разные языки
программирования. В общем, есть несколько классификаций языков. Например, классификация по уровню.
Чем больше "ручной" работы с ресурсами, чем более слабая стандартная библиотека, тем язык считается
низкоуровнеевее и наоборот. Например, в таких языках как си и с++ программист вынужден сам управлять
выделением и освобождением памяти, а в том же питоне - нет, в нём есть сборщик мусора, который
сам удалит ставшие ненужными объекты.

Другая классификация языков - по категориям. Я выделил 7 категорий, вроде ничего не забыл.

Начнем по порядку. Первая категория - структурное программирование. Как я уже говорил, людям
ассемблер быстро надоел и они придумали кучу языков. Вот только писать они прододжали на них
также, как на ассемблере, а именно с использованием goto. А goto плох тем, что, если его часто и
необдуманно исользовать, он порождает спагетти-код. И люди развернули кретовый поход против goto и
назвали его структурным программированием. Есть теорема о структурном программировании: "Любая
программа, заданная в виде блок-схемы, может быть представлена с помощью трех управляющих структур
- последовательность, ветвление, цикл". Даже был придуман первый язык, не содержащий goto - P′′.
Также стоит отметить появление парадигмы разработки "сверху вниз", когда сперва разрабатывается
верхнеуровневый алгоритм, а вместо некоторых его частей вставляются функции-заглушки, которые
разрабатываются на следующей итерации; до этого программа писалась вся сразу целиком.

Вторая категория - процедурное программирование. Она развила идею структурного программирования в
том, что повторяющие части кода хорошо бы выносить в отдельные функции, которые можно
переиспользовать. Также эти функции хорошо бы объединять по какому-то признаку похожести в модули
или библиотеки. Например, функции работы с математическими функциями sin, cos, tan живут в
библиотеке math, а функции сжатия/разжатия потока байт (inflate, deflate) - в zlib. Также стоит
отметить так называемый scoping - это техника сохранения модульности процедур, заключающаяся в том,
что процедуры не должны влиять друг на друга (например, одна процедура не должна менять переменные
другой процедуры, в тч самой себя при повторных вызовах). Кажется, что это невозможно, но на самом
деле такое взаимодействие легко организовать - например, через глобальные переменные. То же POSIX
API весьма сильно страдает от нарушения скопинга. Также стоит отметить, что процедурное
прогаммирование хорошо поддерживается железом - ведь подержка вызова функций реализована на
аппаратном уровне - это и стек (раздельный у процессов/потоков), и инструкции вызова/возврата из
процедуры. Привести пример программы на си.

Третья категория - логическое программирование. Тут я мало могу чего рассказать, но попробую.
Идея в том, что у тебя есть некий набор истинных утверждений, например "Вася - человек", "Человек -
это животное". Тогда ты можешь спросить у компьютера "Вася - животное?" и он ответит да. А вот если
ты спросишь "Вася - мебель?" то он ответит нет, так как ничего не знает о мебели. А вот если ты
добавишь утверждения "Шкаф - это мебель" и "Вася - шкаф 2 на 2 метра", то ответ поменяется. Зачем
это всё надо? Понять, как прийти к выводу из каких-либо рассуждений. Логическое программирование,
это способ создания программ, которые помогают нам что-то выяснить на основе тех фактов, которые мы
имеем. Его особенность заключается в том, что мы не говорим компьютеру, как он должен что-то делать.
Компьютер должен сам это понять. Мы только пишем правила, по которым он должен это понять. У него
есть объекты, есть отношения между ними – он должен их сопоставить.

Самое интересное. ООП:) Если логическое программирование стоит сбоку, то ООП наследует процедурное.
Также как и процедурное, оно появилось как способ борьбы со сложностью программ. Люди заметили, что
часто функции оперируют над одними и теми же данными и появилась идея объединить данные и код в
одном месте. Это объединение структуры и кода, оперирующего над ней, называется классом. Если класс
это просто описание, то объект - это конкретный экземпляр класса, расположенный где-то в памяти
программы. Есть несколько "столпов", на которых держится ООП. Абстракция - это способность отсеять
те вещи, которые не существенны при решении задачи. Например, если ты пишешь программу учета
студентов, то тебя будет интересовать ФИО студента, возможно дата рождения, кафедра, где он учится,
возможно, средний балл, его научник. А вот цвет его глаз, вес, имя любимой собачки тебя совершенно
не интересуют, этим можно пренебречь. Ещё один столп - это инкапсуляция. Это, собственно и есть
объединение данных и кода, оперирующими этими данными. Не стоит путать инкапсуляцию с сокрытием, то
есть скрытием деталей реализации. Пример на с++ с точкой. Наследование - это концепция, когда один
тип может использовать данные и функциональность некоего другого типа, повторно используя код.
Полиморфизм - это способность различных типов сести себя "одинаково", то есть предоставлять один
интерфейс, но различную реализацию. Достигается он за счет виртуальных функций. Пример про
QIODevice. Особняком стоит "утиная типизация", встречающаяся, например, в питоне. Там можно передать
любой объект, и, если у этого объекта есть необъодимые методы (а в питоне все ф-ии виртуалбные), то
код сможет с этим объектом работать. Кстати, на сях вполне можно писать в ООП стиле:) Пример с
точкой на сях.
